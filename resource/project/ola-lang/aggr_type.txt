1. 聚合类型: array struct
       语言表达 IR ASM
array
struct

数组声明 %array = alloca [4 x i32]  // u32[4] array  最终的ir是[2 x i64] 还是[4 x i64]？类型提升如何处理更合适、性能更优？
数组初始化 @global_array = global [4 x 32] [i64 0, i64 1, i64 2, i64 3] // u32[4] global_array=[0,1,2,3]

"global"  [name1 value1] [name2 value2]   gblMem + offset 

结构体声明
struct Person {
age : u32,
id: u64,
}
%Person = type {
    i32,
    i64
}

结构体初始化
@global_structure = global %Person { i32 1, i64 2 }
或
@global_structure = global { i32, i64 } { i32 1, i64 2 }

数组或结构体，作为全局变量或栈上变量，ir中均为指针，上述示例即[4 x i32]*，Person*或{ i32, i64 }*

数组元素访问
结构体指针的方式 使用getelementptr 特别需要注意其用法 https://llvm.org/docs/GetElementPtr.html
结构体直接的方式 使用extractvalue读元素、  insertvalue写元素
%MyStruct = type {
        i32,
        i32
}
@my_struct = global %MyStruct { i32 1, i32 2 }

define i32 @main() {
        %1 = load %MyStruct, %MyStruct* @my_struct

        ret i32 0
}
%2 = extractvalue %MyStruct %1, 1
%3 = insertvalue %MyStruct %1, i32 3, 1



2. 传参
结构体传参
1） 传递结构体变量，值传递。
2） 地址传递，实参结构体变量的首地址，形参结构体指针变量。
3） 传递结构体成员，依次传递，可值可地址传。

数组传参示例(指针传首地址)
caller侧
%2 = alloca [10 x i32], align 4
%6 = getelementptr inbounds [10 x i32], [10 x i32]* %2, i64 0, i64 0
call void @bubble_sort(i32* %6, i32 %7)  // %7为length, %3 = alloca i32, align 4, store i32 10, i32* %3, align 4,%7 = load i32, i32* %3, align 4

callee侧
define void @bubble_sort(i32* %0, i32 %1) #0 {
%3 = alloca i32*, align 8
store i32* %0, i32** %3, align 8
%23 = load i32*, i32** %3, align 8
%26 = getelementptr inbounds i32, i32* %23, i64 %25


3.prophet聚合类型传参、返回值汇编json api:
{
  "program": ".. .LBL0_0:\n ...",
  "prophets": [
    {
      "label": ".PROPHET0_0",
      "code": "%{\n    entry() {\n        ...\n    }\n%}",
      "inputs": [
        {
        "name": "cid.x",
        "length": 5
        }
      ],
      "outputs": [
        {
        "name": "cid.x",
        "length": 5
        }
      ]
      "inputoutput"
    }
  ]
}


其中
code string:
function bubble_sort(felt [] arr) -> felt[]  {
    uint n = arr.length;
    for (uint i = 0; i < n - 1; i++) {
        for (uint j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                uint temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

entry() {
    cid.out = bubble_sort(cid.in);
}
问题1:bubble_sort的实现是带在prophet里，还是用解释器的库函数实现好？

input传参:
1) 参数列表里的元素:若length为1，表示单值。否则表示数组或结构体等聚合类型。单值r1传参，聚合类型r2,r3，[r8-3],[r8-4],...
2) 参数个数:按参数顺序，依次r1,r2,r3寄存器传递，寄存器用完[r8-3],[r8-4],...开始栈传递

llvm 11  

mov r1 temp1
mload r2 [r8,-off]
mov r3 temp2
mstore [r8,-3],temp3  //r8基址
mov r4 r8  //r4变址
mstore [r4,-4],temp4
.PROPHET0_0

output返回值：
[psp]变址到r0,依次[r0],[r0+1],[r0+2],...按顺序获取返回值。

mov r6 psp
mload r0 [r6,0]
mload r1 [r6,1]
mload r2 [r6,2]
mload r3 [r6,3]
mload r4 [r6,4]
mstore [r8,retOff1],r1
mstore [r8,retOff2],r2
mstore [r8,retOff3],r3
mstore [r8,retOff4],r4                          elements indexes
assert // 排序不够直观？input [5 4 3 2 1]  output [4 1 3 2 2 3 1 4 0 5] index+element

inputoutput场景处理？


批量load/store
mload r0 [r6,0]
mload r1 [r6,1]
mload r2 [r6,2]
mload r3 [r6,3]
...
mstore [r6,0] r0
mstore [r0,1] r1
mstore [r6,2] r2
mstore [r6,3] r3

--->
mloadm {r0,r1,r2,r3} [r6,4]
...
mstorem [r6,4] {r0,r1,r2,r3}



问题2： 参数及返回值是否加入类型标识, 由于基础类型仅有一种类型，所有的其他聚合类型都可以转换成array类型来表达？

      "inputs": [
        {
        "name": "cid.in1",
        "type": felt
        },
        {
        "name": "cid.in2",
        "type": array/tupple,
        "length": 10
        },
        {
        "name": "cid.in1",
        "type": struct/enum,
        "field": [a,b,c]
        }
      ],

问题3：类比solidity，当前参数类型相当于memory，是否有可能是storage类型？ 应该不太可能，prophet一般用于中间复杂计算。